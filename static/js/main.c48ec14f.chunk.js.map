{"version":3,"sources":["hooks/useMoneda.js","hooks/useCripto.js","components/Error.js","components/Formulario.js","cryptomonedas.png","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","setState","onChange","e","target","value","map","opcion","codigo","nombre","useCripto","CoinInfo","Name","FullName","Id","MensajeError","p","Error","mensaje","Boton","input","Formulario","setMoneda","setCriptomoneda","listaCripto","setListaCripto","error","setError","moneda","SelectMonedas","cripto","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Parrafo","Precio","span","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","criptomoneda","setResultado","cargando","setCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","className","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c48ec14f.chunk.js","sourcesContent":["import { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n    const [state, setState] = useState(stateInicial);\r\n\r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select onChange={e => setState(e.target.value)} value={state}>\r\n                <option value=''>- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>\r\n                        {opcion.nombre}\r\n                    </option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n\r\n        // return state, interfaz, funcion q modifica state\r\n    );\r\n    return [state, Seleccionar, setState];\r\n};\r\n\r\nexport default useMoneda;\r\n","import { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCripto = (label, stateInicial, opciones) => {\r\n    const [state, setState] = useState(stateInicial);\r\n\r\n    // console.log(opciones);\r\n\r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select onChange={e => setState(e.target.value)} value={state}>\r\n                <option value=''>- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option\r\n                        key={opcion.CoinInfo.Id}\r\n                        value={opcion.CoinInfo.Name}>\r\n                        {opcion.CoinInfo.FullName}\r\n                    </option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n\r\n        // return state, interfaz, funcion q modifica state\r\n    );\r\n    return [state, SelectCripto, setState];\r\n};\r\n\r\nexport default useCripto;\r\n","import styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #fff;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({ mensaje }) => {\r\n    return <MensajeError>{mensaje}</MensajeError>;\r\n};\r\n\r\nexport default Error;\r\n","import { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCripto from '../hooks/useCripto';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\n\r\nconst Boton = styled.input`\r\n    margin-top: 20px;\r\n    margin-bottom: 15px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66adfe;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    transition: background-color 0.3s ease;\r\n\r\n    &:hover {\r\n        background-color: #326ac0;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Formulario = ({ setMoneda, setCriptomoneda }) => {\r\n    //State del listado de criptos\r\n    const [listaCripto, setListaCripto] = useState([]);\r\n    const [error, setError] = useState(false);\r\n\r\n    const MONEDAS = [\r\n        { codigo: 'USD', nombre: 'Dolar EEUU' },\r\n        { codigo: 'EUR', nombre: 'Euro' },\r\n        { codigo: 'ARS', nombre: 'Peso Argentino' },\r\n        { codigo: 'GBP', nombre: 'Libra Esterlina' },\r\n    ];\r\n\r\n    // Utilizar useMoneda\r\n    const [moneda, SelectMonedas] = useMoneda('Elige tu Moneda', '', MONEDAS);\r\n\r\n    // Utilizar CriptoMoneda\r\n    const [cripto, SelectCripto] = useCripto(\r\n        'Elige tu Criptomoneda',\r\n        '',\r\n        listaCripto\r\n    );\r\n\r\n    // Ejecutar llamado a la API\r\n    useEffect(() => {\r\n        const consultarAPI = async () => {\r\n            const url =\r\n                'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n            const resultado = await axios.get(url);\r\n            setListaCripto(resultado.data.Data);\r\n        };\r\n        consultarAPI();\r\n    }, []);\r\n\r\n    //Cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar si ambos campos estan llenos\r\n        if (moneda === '' || cripto === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        // Pasar los datos al componente principal\r\n        setError(false);\r\n        setMoneda(moneda);\r\n        setCriptomoneda(cripto);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={cotizarMoneda}>\r\n            {error ? (\r\n                <Error mensaje='Todos los campos son obligatorios' />\r\n            ) : null}\r\n\r\n            <SelectMonedas />\r\n\r\n            <SelectCripto />\r\n\r\n            <Boton type='submit' value='Calcular' />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Formulario;\r\n","export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import styled from '@emotion/styled';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #fff;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Parrafo = styled.p`\r\n    font-size: 18px;\r\n\r\n    span {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Precio = styled.span`\r\n    font-size: 30px;\r\n    span {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Cotizacion = ({ resultado }) => {\r\n    if (Object.keys(resultado).length === 0) return null;\r\n    console.log(resultado);\r\n    return (\r\n        <ResultadoDiv>\r\n            <Precio>\r\n                El precio es: <span>{resultado.PRICE}</span>\r\n            </Precio>\r\n            <Parrafo>\r\n                Precio más alto del día: <span>{resultado.HIGHDAY}</span>\r\n            </Parrafo>\r\n            <Parrafo>\r\n                El más bajo del día: <span>{resultado.LOWDAY}</span>\r\n            </Parrafo>\r\n            <Parrafo>\r\n                Variación últimas 24HS:{' '}\r\n                <span>{resultado.CHANGEPCT24HOUR} %</span>\r\n            </Parrafo>\r\n            <Parrafo>\r\n                Última actualización: <span>{resultado.LASTUPDATE}</span>\r\n            </Parrafo>\r\n        </ResultadoDiv>\r\n    );\r\n};\r\n\r\nexport default Cotizacion;\r\n","import './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div class='sk-chase'>\r\n            <div class='sk-chase-dot'></div>\r\n            <div class='sk-chase-dot'></div>\r\n            <div class='sk-chase-dot'></div>\r\n            <div class='sk-chase-dot'></div>\r\n            <div class='sk-chase-dot'></div>\r\n            <div class='sk-chase-dot'></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Formulario from './components/Formulario';\nimport imagen from './cryptomonedas.png';\nimport axios from 'axios';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\nconst Contenedor = styled.div`\n    max-width: 900px;\n    margin: -45px auto;\n    @media (min-width: 992px) {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        column-gap: 2 rem;\n    }\n`;\n\nconst Imagen = styled.img`\n    max-width: 100%;\n    margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n    font-family: 'Bebas Neue', cursive;\n    color: #fff;\n    text-align: left;\n    font-weight: 700;\n    font-size: 50px;\n    margin-bottom: 50px;\n    margin-top: 80px;\n\n    &::after {\n        content: '';\n        width: 100px;\n        height: 6px;\n        background-color: #66a2fe;\n        display: block;\n    }\n`;\n\nfunction App() {\n    const [moneda, setMoneda] = useState('');\n    const [criptomoneda, setCriptomoneda] = useState('');\n    const [resultado, setResultado] = useState({});\n    const [cargando, setCargando] = useState(false);\n\n    useEffect(() => {\n        const cotizarCriptomoneda = async () => {\n            //evitamos la ejecucion la primera vez\n            if (moneda === '') return;\n\n            // Consultar la API\n            const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n            const resultado = await axios.get(url);\n\n            // Mostrar el spinner\n            setCargando(true);\n\n            // con un settieout ocultar el spinner y mostrar el resultado.\n            setTimeout(() => {\n                // cargar estado de cargando\n                setCargando(false);\n\n                // guardar cotizacion\n                setResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n            }, 1500);\n        };\n        cotizarCriptomoneda();\n    }, [moneda, criptomoneda]);\n\n    // mostrar spinner o resultado\n\n    const componente = cargando ? (\n        <Spinner />\n    ) : (\n        <Cotizacion resultado={resultado} />\n    );\n\n    return (\n        <Contenedor className='App'>\n            <div>\n                <Imagen src={imagen} alt='imagen cripto' />\n            </div>\n            <div>\n                <Heading>Cotiza Criptomonedas al Instante</Heading>\n\n                <Formulario\n                    setMoneda={setMoneda}\n                    setCriptomoneda={setCriptomoneda}\n                />\n\n                {componente}\n            </div>\n        </Contenedor>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}